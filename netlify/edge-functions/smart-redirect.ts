// Netlify Edge Function: xoay link 30 ph√∫t/l·∫ßn theo th·ª© t·ª±, KH√îNG l·∫∑p l·∫°i.
// S·ª≠a START_AT th√†nh th·ªùi ƒëi·ªÉm b·∫°n mu·ªën b·∫Øt ƒë·∫ßu d√πng link s·ªë 1.

export default async (request: Request, context: any) => {
  const url = new URL(request.url);
  const path = url.pathname;
  const origin = url.origin.endsWith("/") ? url.origin : url.origin + "/";

  // ================= C·∫§U H√åNH =================
  const SLOT_MS  = 30 * 60 * 1000;                 // 30 ph√∫t / 1 link
  const START_AT = new Date("2025-09-21T00:00:00Z").getTime();
  // ‚Üë ƒê·ªîI th√†nh th·ªùi ƒëi·ªÉm b·∫°n "go live" (UTC). V√≠ d·ª• mu·ªën b·∫Øt ƒë·∫ßu ngay b√¢y gi·ªù:
  //   l·∫•y gi·ªù UTC hi·ªán t·∫°i v√† d√°n v√†o ƒë√¢y.
  const LIST_URL = origin + "targets.json";        // danh s√°ch 200 link (file tƒ©nh)
  const LOOP = false;                              // false = h·∫øt l√† d·ª´ng; true = quay v√≤ng
  // ============================================

  // BYPASS: ƒë·ªÉ Netlify tr·∫£ file tƒ©nh tr·ª±c ti·∫øp (·∫£nh/JSON/asset...)
  if (
    path === "/thumb.jpg" ||
    path === "/thumb.png" ||
    path === "/targets.json" ||
    path === "/favicon.ico" ||
    path === "/robots.txt" ||
    path === "/sitemap.xml" ||
    /^\/assets\/.+\.(avif|bmp|gif|ico|jpe?g|png|svg|webp)$/i.test(path) ||
    /\.(avif|bmp|gif|ico|jpe?g|png|svg|webp|xml|txt|css|js|map)$/i.test(path)
  ) {
    return await context.next();
  }

  // ƒê·ªçc danh s√°ch link t·ª´ targets.json
  let links: string[] = [];
  try {
    const r = await fetch(LIST_URL, { headers: { "cache-control": "no-cache" } });
    if (r.ok) {
      const data = await r.json();
      if (Array.isArray(data?.links)) links = data.links.filter(Boolean);
    }
  } catch {}
  if (!links.length) {
    return new Response("<!doctype html><body>Ch∆∞a c·∫•u h√¨nh targets.json</body></html>", {
      headers: { "content-type": "text/html; charset=utf-8" }
    });
  }

  // T√≠nh index theo "khung 30 ph√∫t" k·ªÉ t·ª´ START_AT
  const now = Date.now();
  let idx = Math.floor((now - START_AT) / SLOT_MS);
  if (idx < 0) idx = 0; // tr∆∞·ªõc gi·ªù START_AT th√¨ d√πng ph·∫ßn t·ª≠ ƒë·∫ßu

  // Endpoint ki·ªÉm tra nhanh (t√πy ch·ªçn): /_status
  if (path === "/_status") {
    const cur = idx >= links.length ? null : links[Math.min(idx, links.length - 1)];
    return new Response(JSON.stringify({
      now, START_AT, SLOT_MS, idx, total: links.length, target: cur
    }, null, 2), { headers: { "content-type": "application/json" } });
  }

  // H·∫øt link -> d·ª´ng (kh√¥ng d√πng l·∫°i link c≈©)
  if (!LOOP && idx >= links.length) {
    const htmlDone = `<!doctype html><meta charset="utf-8">
    <body style="font-family:system-ui;padding:24px">
      <h1>ƒê√£ h·∫øt link trong danh s√°ch</h1>
      <p>ƒê√£ s·ª≠ d·ª•ng ${links.length} link, m·ªói 30 ph√∫t m·ªôt link, v√† kh√¥ng l·∫∑p l·∫°i.</p>
    </body>`;
    return new Response(htmlDone, { headers: { "content-type": "text/html; charset=utf-8" } });
  }

  // N·∫øu cho ph√©p quay v√≤ng
  if (LOOP && links.length) {
    idx = idx % links.length;
  }

  const target = links[Math.min(idx, links.length - 1)];

  // Ph√¢n bi·ªát bot MXH vs ng∆∞·ªùi d√πng th·∫≠t
  const ua = (request.headers.get("user-agent") || "").toLowerCase();
  const isBot = /facebookexternalhit|facebot|twitterbot|slackbot|telegrambot|zalo|linkedinbot|discordbot|whatsapp|pinterest|vkshare|applebot|google.*snippet|bingbot|yandexbot/.test(ua);

  // Ng∆∞·ªùi d√πng th·∫≠t -> 302 v·ªÅ link hi·ªán t·∫°i
  if (!isBot) return Response.redirect(target, 302);

  // Bot -> tr·∫£ HTML c√≥ OG (hi·ªán nh∆∞ b√†i vi·∫øt)
  const title = "üî• Tin n√≥ng h√¥m nay!";
  const desc  = "∆Øu ƒë√£i c·∫≠p nh·∫≠t theo khung 30 ph√∫t ‚Äì nh·∫•n ƒë·ªÉ xem chi ti·∫øt.";
  const img   = (await fetch(origin + "thumb.jpg", { method: "HEAD" })).ok ? "thumb.jpg" : "thumb.png";
  const imgURL = origin + img + "?v=5";
  const imgType = img.endsWith(".png") ? "image/png" : "image/jpeg";
  const pageURL = url.href;

  const html = `<!doctype html>
<html lang="vi"><head>
<meta charset="utf-8">
<title>${title}</title>
<link rel="canonical" href="${pageURL}">
<meta property="og:type" content="article">
<meta property="og:title" content="${title}">
<meta property="og:description" content="${desc}">
<meta property="og:image" content="${imgURL}">
<meta property="og:image:secure_url" content="${imgURL}">
<meta property="og:image:type" content="${imgType}">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="og:url" content="${pageURL}">
<meta property="og:site_name" content="Tin Hot H√¥m Nay">
<meta property="og:locale" content="vi_VN">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:title" content="${title}">
<meta name="twitter:description" content="${desc}">
<meta name="twitter:image" content="${imgURL}">
</head><body></body></html>`;

  return new Response(html, {
    headers: { "content-type": "text/html; charset=utf-8", "cache-control": "public, max-age=600" }
  });
};


